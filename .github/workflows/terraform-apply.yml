name: Terraform Apply

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-apply.yml'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: TFLint
      run: |
        cd terraform/envs/${{ matrix.environment }}
        tflint --init
        tflint --format sarif --out tflint-results.sarif

    - name: Upload TFLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: terraform/envs/${{ matrix.environment }}/tflint-results.sarif

    - name: Setup TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/envs/${{ matrix.environment }}
        soft_fail: true

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: terraform/envs/${{ matrix.environment }}/

    - name: Terraform Init
      run: |
        cd terraform/envs/${{ matrix.environment }}
        terraform init -backend-config="../../backend-config.hcl"

    - name: Terraform Apply
      run: |
        cd terraform/envs/${{ matrix.environment }}
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: ${{ matrix.environment }}

    - name: Update kubeconfig
      run: |
        cd terraform/envs/${{ matrix.environment }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ matrix.environment }}-devops-playground

    - name: Deploy ArgoCD
      run: |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
